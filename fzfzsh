fzf-custom-preview () {
    ext=$1:t:e
    if [ -d $1 ] && eza --all --classify --color=always -T $1 && return
    case "$ext" in
        pdf|Pdf|PDF)
            pdftotext -nodiag -nopgbrk $1 - | bat --style=numbers --color=always --line-range :500
            ;;
        rar|Rar|RAR)
            lsar $1
        ;;
        *)
            (more --style=numbers --color=always --line-range :500 $1|| tree --charset=utf-8 -C $1) 2> /dev/null | head -200
            ;;
        esac
    return
}

zle -N fzf-custom-preview

fzf-redraw-prompt() {
    local precmd
    for precmd in $precmd_functions; do
        $precmd
    done
    zle reset-prompt
}
zle -N fzf-redraw-prompt

accept-line() {
    if [[ -z $BUFFER ]]; then
        zle -I
        l
    else
        zle ".$WIDGET"
    fi
}

zle -N accept-line

function man() {
    $MAN="/bin/man"
    if [ "$#" -gt 0 ]; then
        /bin/man $1
        return
    fi
    local choice
    choice=$(/bin/man -k . | fzf -q "'$1" --prompt='man> ' --preview $'echo {} | tr -d \'()\' | awk \'{printf "%s ", $2} {print $1}\' | xargs -r /bin/man' | tr -d '()' | awk '{printf "%s ", $2} {print $1}' | bat -l /bin/man -p)
    /bin/man $(echo $choice | tr -d '"')
}

#
# Google Chrome
# c - browse chrome history
h() {
    local cols sep google_history open
    cols=$((COLUMNS / 3))
    sep='{::}'

    if [ "$(uname)" = "Darwin" ]; then
        google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
        open=open
    else
        google_history="$HOME/.config/google-chrome/Default/History"
        open=xdg-open
    fi
    cp -f "$google_history" /tmp/h
    sqlite3 -separator $sep /tmp/h \
        "select substr(title, 1, $cols), url
  from urls order by last_visit_time desc" |
        awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
        fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open >/dev/null 2>/dev/null
}

# b - browse chrome bookmarks
b() {
    bookmarks_path=~/Library/Application\ Support/Google/Chrome/Default/Bookmarks

    jq_script='
  def ancestors: while(. | length >= 2; del(.[-1,-2]));
  . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

    jq -r "$jq_script" <"$bookmarks_path" |
        sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' |
        fzf --ansi |
        cut -d$'\t' -f2 |
        xargs open
}
