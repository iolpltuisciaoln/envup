fzf-custom-preview () {
    ext=$1:t:e
    if [ -d $1 ] && eza --all --classify --color=always -T $1 && return
    case "$ext" in
        pdf|Pdf|PDF)
            pdftotext -nodiag -nopgbrk $1 - | bat --style=numbers --color=always --line-range :500
            ;;
        rar|Rar|RAR)
            lsar $1
        ;;
        *)
            (more --style=numbers --color=always --line-range :500 $1|| tree --charset=utf-8 -C $1) 2> /dev/null | head -200
            ;;
        esac
    return
}

zle -N fzf-custom-preview

fzf-redraw-prompt() {
    local precmd
    for precmd in $precmd_functions; do
        $precmd
    done
    zle reset-prompt
}
zle -N fzf-redraw-prompt

accept-line() {
    if [[ -z $BUFFER ]]; then
        zle -I
        l
    else
        zle ".$WIDGET"
    fi
}

zle -N accept-line

function man() {
    if [ "$#" -gt 0 ]; then
        /bin/man $1 | col -bx | bat --language=man --plain --color always --theme="Monokai Extended"
        return
    fi

    batman="/bin/man {1} | col -bx | bat --language=man --plain --color always --theme=\"Monokai Extended\""
    /bin/man -k . | sort \
        | awk -v cyan=$(tput setaf 6) -v blue=$(tput setaf 4) -v res=$(tput sgr0) -v bld=$(tput bold) '{ $1=cyan bld $1; $2=res blue;} 1' \
        | fzf  \
        -q "'$1" \
        --ansi \
        --tiebreak=begin \
        --prompt=' Man > '  \
        --preview-window 'up,50%,rounded,<50(up,85%,border-bottom)' \
        --preview "${batman}" \
        --bind "enter:become(man {1})" 
    zle reset-prompt
}

function dnf() {
    if [ "$#" -gt 0 ]; then
        `which dnf` "$@"
    else
        ~/.dnf.fzf
    fi
}


# FF browse history

h() {
    local cols sep google_history open
    cols=$((COLUMNS / 3))
    sep='{::}'

    if [ "$(uname)" = "Darwin" ]; then
        brows_hist_db="$HOME/Library/Application Support/Google/Chrome/Default/History"
        open=open
    else
        cp -f $HOME/.mozilla/firefox/*/places.sqlite /tmp/h
        open=xdg-open
    fi
    sqlite3 -separator $sep /tmp/h \
        "select datetime(v.visit_date/1000000, 'unixepoch'), substr(p.title, 1, $cols), p.url\
        from moz_places p \
        JOIN moz_historyvisits v ON p.id = v.place_id \
        GROUP BY p.url\
        ORDER BY last_visit_date DESC" |
        awk -F $sep '{printf "%s  \x1b[36m%s  \x1b[m%s\n", $1, $2, $3}' |
        sed -E 's/\x1b\[[0-9;]+m  //g' |
        fzf --ansi --multi |
        xargs $open >/dev/null 2>/dev/null
}

# #
# # Google Chrome
# # c - browse chrome history
# h() {
#     local cols sep google_history open
#     cols=$((COLUMNS / 3))
#     sep='{::}'

#     if [ "$(uname)" = "Darwin" ]; then
#         google_history="$HOME/Library/Application Support/Google/Chrome/Default/History"
#         open=open
#     else
#         google_history="$HOME/.config/google-chrome/Default/History"
#         open=xdg-open
#     fi
#     cp -f "$google_history" /tmp/h
#     sqlite3 -separator $sep /tmp/h \
#         "select substr(title, 1, $cols), url
#   from urls order by last_visit_time desc" |
#         awk -F $sep '{printf "%-'$cols's  \x1b[36m%s\x1b[m\n", $1, $2}' |
#         fzf --ansi --multi | sed 's#.*\(https*://\)#\1#' | xargs $open >/dev/null 2>/dev/null
# }

# b - browse chrome bookmarks
b() {
    bookmarks_path=~/Library/Application\ Support/Google/Chrome/Default/Bookmarks

    jq_script='
  def ancestors: while(. | length >= 2; del(.[-1,-2]));
  . as $in | paths(.url?) as $key | $in | getpath($key) | {name,url, path: [$key[0:-2] | ancestors as $a | $in | getpath($a) | .name?] | reverse | join("/") } | .path + "/" + .name + "\t" + .url'

    jq -r "$jq_script" <"$bookmarks_path" |
        sed -E $'s/(.*)\t(.*)/\\1\t\x1b[36m\\2\x1b[m/g' |
        fzf --ansi |
        cut -d$'\t' -f2 |
        xargs open
}

jump() {
    local preview_cmd="ls {2..}"
    if command -v exa &> /dev/null; then
        preview_cmd="exa -l {2}"
    fi

    if [[ $# -eq 0 ]]; then
                local output="$(autojump -s | sort -k1gr | awk -F : '$1 ~ /[0-9]/ && $2 ~ /^\s*\// {print $1 $2}' | fzf --height 100% --reverse --inline-info --preview "$preview_cmd" --preview-window down:50% | cut -d$'\t' -f2- | sed 's/^\s*//')"
                if [[ -d "${output}" ]]; then
                    if [ -t 1 ]; then  # if stdout is a terminal, use colors
                            echo -e "\\033[31m${output}\\033[0m"
                    else
                            echo -e "${output}"
                    fi
                    chdir "${output}"
                    fzf-redraw-prompt
                fi
    else
        cd $(autojump $@)
    fi
}

